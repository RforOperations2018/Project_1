y.fake
as.numeric(score.fake >= 0.5)
classMetrics <- function(score, y, cutoff, type = c("all", "accuracy", "sensitivity", "specificity", "ppv", "npv", "precision", "recall")){
type <- match.arg(type, several.ok = TRUE)
strings <- c("accuracy", "sensitivity", "specificity", "ppv", "npv", "precision", "recall")
predicted <- as.numeric(score >= cutoff)
observed <- y
conf.mat <- table(predicted, observed)
conf.mat
accuracy <- (conf.mat[1,1] + conf.mat[2,2])/sum(conf.mat[,])
sensitivity <- (conf.mat[2,2]/sum(conf.mat[,2]))
specificity <- (conf.mat[1,1]/sum(conf.mat[,1]))
ppv <- (conf.mat[2,2]/sum(conf.mat[2,]))
npv <- (conf.mat[1,1]/sum(conf.mat[1,]))
precision <- ppv
recall <- specificity
value <-  c(accuracy, sensitivity, specificity, ppv, npv, precision, recall)
perf.df <- data.frame(strings, value )
if (type == "all"){
perf.df
}
else{
value <- perf.df$value[which(strings %in% type)]
strings <- perf.df$strings[which(strings %in% type)]
perf.df <- data.frame(strings, value)
}
result <- list(conf.mat = conf.mat, perf = perf.df)
#print(conf.mat, perf.df)
#print(conf.mat)
#print(perf)
print(result)
}
classMetrics(score.fake, y.fake, cutoff = 0.6, type = "all")
classMetrics(score.fake, y.fake, cutoff = 0.6, type = c("precision", "recall"))
classMetrics(score.fake, y.fake, cutoff = 0.6, type = "all")
#print(conf.mat, perf.df)
#print(conf.mat)
#print(perf)
return(result)
classMetrics <- function(score, y, cutoff, type = c("all", "accuracy", "sensitivity", "specificity", "ppv", "npv", "precision", "recall")){
type <- match.arg(type, several.ok = TRUE)
strings <- c("accuracy", "sensitivity", "specificity", "ppv", "npv", "precision", "recall")
predicted <- as.numeric(score >= cutoff)
observed <- y
conf.mat <- table(predicted, observed)
conf.mat
accuracy <- (conf.mat[1,1] + conf.mat[2,2])/sum(conf.mat[,])
sensitivity <- (conf.mat[2,2]/sum(conf.mat[,2]))
specificity <- (conf.mat[1,1]/sum(conf.mat[,1]))
ppv <- (conf.mat[2,2]/sum(conf.mat[2,]))
npv <- (conf.mat[1,1]/sum(conf.mat[1,]))
precision <- ppv
recall <- specificity
value <-  c(accuracy, sensitivity, specificity, ppv, npv, precision, recall)
perf.df <- data.frame(strings, value )
if (type == "all"){
perf.df
}
else{
value <- perf.df$value[which(strings %in% type)]
strings <- perf.df$strings[which(strings %in% type)]
perf.df <- data.frame(strings, value)
}
result <- list(conf.mat = conf.mat, perf = perf.df)
#print(conf.mat, perf.df)
#print(conf.mat)
#print(perf)
return(result)
}
# classMetrics(score.fake, y.fake, cutoff = 0.6, type = "all")
# classMetrics(score.fake, y.fake, cutoff = 0.6, type = c("precision", "recall"))
# classMetrics(score.fake, y.fake, cutoff = 0.6, type = "all")
# classMetrics(score.fake, y.fake, cutoff = 0.6, type = c("precision", "recall"))
result
classMetrics <- function(score, y, cutoff, type = c("all", "accuracy", "sensitivity", "specificity", "ppv", "npv", "precision", "recall")){
type <- match.arg(type, several.ok = TRUE)
strings <- c("accuracy", "sensitivity", "specificity", "ppv", "npv", "precision", "recall")
predicted <- as.numeric(score >= cutoff)
observed <- y
conf.mat <- table(predicted, observed)
conf.mat
accuracy <- (conf.mat[1,1] + conf.mat[2,2])/sum(conf.mat[,])
sensitivity <- (conf.mat[2,2]/sum(conf.mat[,2]))
specificity <- (conf.mat[1,1]/sum(conf.mat[,1]))
ppv <- (conf.mat[2,2]/sum(conf.mat[2,]))
npv <- (conf.mat[1,1]/sum(conf.mat[1,]))
precision <- ppv
recall <- specificity
value <-  c(accuracy, sensitivity, specificity, ppv, npv, precision, recall)
perf.df <- data.frame(strings, value )
if (type == "all"){
perf.df
}
else{
value <- perf.df$value[which(strings %in% type)]
strings <- perf.df$strings[which(strings %in% type)]
perf.df <- data.frame(strings, value)
}
result <- list(conf.mat = conf.mat, perf = perf.df)
#print(conf.mat, perf.df)
#print(conf.mat)
print(result)
#return(result)
}
classMetrics(score.fake, y.fake, cutoff = 0.6, type = "all")
classMetrics(score.fake, y.fake, cutoff = 0.2, type = "all")
classMetrics(score.fake, y.fake, cutoff = 0.6, type = c("precision", "recall"))
classMetrics(score.fake, y.fake, cutoff = 0.2, type = "all")
classMetrics(score.fake, y.fake, cutoff = 0.6, type = "all")
classMetrics <- function(score, y, cutoff, type = c("all", "accuracy", "sensitivity", "specificity", "ppv", "npv", "precision", "recall")){
type <- match.arg(type, several.ok = TRUE)
strings <- c("accuracy", "sensitivity", "specificity", "ppv", "npv", "precision", "recall")
predicted <- as.numeric(score >= cutoff)
observed <- y
conf.mat <- table(predicted, observed)
conf.mat
accuracy <- (conf.mat[1,1] + conf.mat[2,2])/sum(conf.mat[,])
sensitivity <- (conf.mat[2,2]/sum(conf.mat[,2]))
specificity <- (conf.mat[1,1]/sum(conf.mat[,1]))
ppv <- (conf.mat[2,2]/sum(conf.mat[2,]))
npv <- (conf.mat[1,1]/sum(conf.mat[1,]))
precision <- ppv
recall <- (conf.mat[2,2]/sum(conf.mat[,2]))
value <-  c(accuracy, sensitivity, specificity, ppv, npv, precision, recall)
perf.df <- data.frame(strings, value )
if (type == "all"){
perf.df
}
else{
value <- perf.df$value[which(strings %in% type)]
strings <- perf.df$strings[which(strings %in% type)]
perf.df <- data.frame(strings, value)
}
result <- list(conf.mat = conf.mat, perf = perf.df)
#print(conf.mat, perf.df)
#print(conf.mat)
print(result)
#return(result)
}
classMetrics(score.fake, y.fake, cutoff = 0.2, type = "all")
classMetrics(score.fake, y.fake, cutoff = 0.6, type = "all")
classMetrics(score.fake, y.fake, cutoff = 0.6, type = "all")
classMetrics$strings == "sensitivity"
names(classMetrics)
marketing.predict <- predict(marketing.test, data = marketing.train, type = "prob" )[, "yes"]
classMetrics(marketing.predict, marketing.train$y, cutoff = 0.25, type = "all")
marketing.predict <- predict(marketing.train, data = marketing.test, type = "prob" )[, "yes"]
classMetrics(marketing.predict, marketing.train$y, cutoff = 0.25, type = "all")
classMetrics(marketing.predict, marketing.train$y, cutoff = 0.4, type = "all")
classMetrics(marketing.predict, marketing.train$y, cutoff = 0.6, type = "all")
marketing.predict <- predict(marketing.train, data = marketing.test, type = "prob" )[, "yes"]
marketing.predict <- predict(marketing.train, data = marketing.test, type = "prob" )#[, "yes"]
classMetrics(marketing.predict, marketing.train$y, cutoff = 0.25, type = "all")
classMetrics(marketing.predict, marketing.train$y, cutoff = 0.4, type = "all")
classMetrics(marketing.predict, marketing.train$y, cutoff = 0.6, type = "all")
classMetrics(marketing.predict, marketing.train$y, cutoff = 0.25, type = "all")
classMetrics(marketing.predict, marketing.train$y, cutoff = 0.4, type = "all")
classMetrics(marketing.predict, marketing.train$y, cutoff = 0.6, type = "all")
marketing.predict <- predict(marketing.train, data = marketing.test, type = "prob" )#[, "yes"]
marketing.predict <- predict(marketing.pruned, data = marketing.test, type = "prob" )#[, "yes"]
classMetrics(marketing.predict, marketing.train$y, cutoff = 0.25, type = "all")
marketing.predict <- predict(marketing.pruned, data = marketing.test, type = "prob" )[, "yes"]
classMetrics(marketing.predict, marketing.train$y, cutoff = 0.25, type = "all")
classMetrics(marketing.predict, marketing.train$y, cutoff = 0.4, type = "all")
classMetrics(marketing.predict, marketing.train$y, cutoff = 0.6, type = "all")
classMetrics(marketing.predict, marketing.train$y, cutoff = 0.25, type = "all")
classMetrics(marketing.predict, marketing.train$y, cutoff = 0.6, type = "all")
# what is mtry supposed to be
marketing.rf <- randomForest(y ~ ., data = marketing.train, importance=TRUE)
# what is mtry supposed to be
marketing.rf <- randomForest(y ~ ., data = marketing.train, importance=TRUE)
marketing.rf
#Import NLSY 79 Raw Data
nlsy79.raw <- read.csv("C:/Users/atirv/Desktop/Programming in R/Project/nlsy79_income.csv", header=TRUE)
### Importing Raw Data
#Loading packages
library(readxl)
library(MASS)
library(plyr)
library(dplyr)
library(ggplot2)
library(knitr)
library(reshape2)
options(scipen = 999)
#Import NLSY 79 Raw Data
nlsy79.raw <- read.csv("C:/Users/atirv/Desktop/Programming in R/Project/nlsy79_income.csv", header=TRUE)
library(plyr)
library(dplyr)
library(ggplot2)
library(ISLR)
library(glmnet)
library(leaps)  # needed for regsubsets
library(boot)
library(knitr)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
options(scipen = 4)
#import data sets
high <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/high.csv", header = TRUE)
elementary <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/elementary.csv", header = TRUE)
middle <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/middle.csv", header = TRUE)
elementary$SchoolType <- 1
middle$SchoolType <- 2
high$SchoolType <- 3
AllStudents <- rbind(elementary, middle, high)
colnames(AllStudents) <- c("charter", "stud.num", "African", "Asian", "Hispanic", "White", "disadvantaged", "year.round", "core.courses", "parent.ed", "teachers.num", "teacher.prep", "teacher.emerg", "teacher.waiver", "teach.yrs", "teach.first", "teach.second", "API", "SchoolType")
#Altering of Observations
AllStudents$parent.ed <- as.numeric(as.character(AllStudents$parent.ed))
AllStudents$stud.num <-as.numeric(AllStudents$stud.num)
AllStudents$Student.Teacher.Ratio <- AllStudents$stud.num/AllStudents$teachers.num
AllStudents <- mutate(AllStudents, charter = as.factor(mapvalues(charter, c("?", "D", "Y"), c("No", "Yes","Yes"))))
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(dplyr)
library(ggplot2)
library(glmnet)
library(leaps)  # needed for regsubsets
library(boot)
library(knitr)
library(partykit)
library(caret)
library(rpart)
library(randomForest)
library(pROC)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
options(scipen = 4)
#import data sets
high <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/high.csv", header = TRUE)
elementary <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/elementary.csv", header = TRUE)
middle <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/middle.csv", header = TRUE)
elementary$SchoolType <- 1
middle$SchoolType <- 2
high$SchoolType <- 3
AllStudents <- rbind(elementary, middle, high)
#
colnames(AllStudents) <- c("charter", "stud.num", "African", "Asian", "Hispanic", "White", "disadvantaged", "year.round", "core.courses", "parent.ed", "teachers.num", "teacher.prep", "teacher.emerg", "teacher.waiver", "teach.yrs", "teach.first", "teach.second", "API", "SchoolType")
#Altering of Observations
AllStudents$parent.ed <- as.numeric(as.character(AllStudents$parent.ed))
AllStudents$stud.num <-as.numeric(AllStudents$stud.num)
AllStudents$Student.Teacher.Ratio <- AllStudents$stud.num/AllStudents$teachers.num
AllStudents <- mutate(AllStudents, charter = as.factor(mapvalues(charter, c("?", "D", "Y"), c("No", "Yes","Yes"))))
knitr::opts_chunk$set(echo = TRUE)
x <- randomForest(y ~ ., data = AllStudents, importance=TRUE)
x <- randomForest(API ~ ., data = AllStudents, importance=TRUE)
api.x <- as.matrix(sub.data[, -which(names(sub.data) == "API")])
sub.data <- subset(AllStudents, select = -c(9))
api.x <- as.matrix(sub.data[, -which(names(sub.data) == "API")])
api.y <-  sub.data$API
api.x
# Extract covariates matrix (for lasso)
news.x <- as.matrix(news[, -which(names(news) == "shares")])
library(ggplot2)
library(ISLR)
library(glmnet)
library(leaps)  # needed for regsubsets
library(boot)   # needed for cv.glm
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
options(scipen = 4)
# Online news share count data
set.seed(4218971)
online.news <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/data/online_news.csv")
# subsample the data to reduce data size
num.noise <- 50
news <- data.frame(online.news,
matrix(rnorm(num.noise * nrow(online.news)),
nrow = nrow(online.news))
)
# Extract covariates matrix (for lasso)
news.x <- as.matrix(news[, -which(names(news) == "shares")])
# Extract response variable (for lasso)
news.y <- news$shares
news.x
AllStudents$API[AllStudents$API == '?'] <- NA
View(AllStudents)
AllStudents$API[AllStudents$API == '?'] <- NA
View(AllStudents)
#Altering of Observations
AllStudents$parent.ed <- as.numeric(as.character(AllStudents$parent.ed))
AllStudents$stud.num <-as.numeric(AllStudents$stud.num)
AllStudents$Student.Teacher.Ratio <- AllStudents$stud.num/AllStudents$teachers.num
AllStudents <- mutate(AllStudents, charter = as.factor(mapvalues(charter, c("?", "D", "Y"), c("No", "Yes","Yes"))))
AllStudents <- mutate(AllStudents, API = as.factor(mapvalues(API, "?", NA)
AllStudents <- mutate(AllStudents, API = as.factor(mapvalues(API, "?", NA)
AllStudents <- mutate(AllStudents, API = as.factor(mapvalues(API, "?", NA)))
AllStudentsNew <- subset(AllStudents, !is.na(API))
View(AllStudentsNew)
library(plyr)
library(dplyr)
library(ggplot2)
library(glmnet)
library(leaps)  # needed for regsubsets
library(boot)
library(knitr)
library(partykit)
library(caret)
library(rpart)
library(randomForest)
library(pROC)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
options(scipen = 4)
high <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/high.csv", header = TRUE)
elementary <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/elementary.csv", header = TRUE)
middle <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/middle.csv", header = TRUE)
elementary$SchoolType <- 1
middle$SchoolType <- 2
high$SchoolType <- 3
AllStudents <- rbind(elementary, middle, high)
colnames(AllStudents) <- c("charter", "stud.num", "African", "Asian", "Hispanic", "White", "disadvantaged", "year.round", "core.courses", "parent.ed", "teachers.num", "teacher.prep", "teacher.emerg", "teacher.waiver", "teach.yrs", "teach.first", "teach.second", "API", "SchoolType")
View(AllStudents)
names(AllStudents)
colnames(AllStudents)
rownames(AllStudents)
attributes(AllStudents)
str(AllStudents)
class(AllStudents)
str(AllStudents)
library(plyr)
library(dplyr)
library(ggplot2)
library(glmnet)
library(leaps)  # needed for regsubsets
library(boot)
library(knitr)
library(partykit)
library(caret)
library(rpart)
library(randomForest)
library(pROC)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
options(scipen = 4)
AllStudents$parent.ed <- as.numeric(as.character(AllStudents$parent.ed))
AllStudents$stud.num <-as.numeric(AllStudents$stud.num)
AllStudents$Student.Teacher.Ratio <- AllStudents$stud.num/AllStudents$teachers.num
AllStudents <- mutate(AllStudents, charter = as.factor(mapvalues(charter, c("?", "D", "Y"), c("No", "Yes","Yes"))))
str(AllStudents)
AllStudents <- mutate(AllStudents, API = as.factor(mapvalues(API, "?", NA)))
AllStudentsNew <- subset(AllStudents, !is.na(API))
knitr::opts_chunk$set(echo = TRUE)
library(plyr)
library(dplyr)
library(ggplot2)
library(glmnet)
library(leaps)  # needed for regsubsets
library(boot)
library(knitr)
library(partykit)
library(caret)
library(rpart)
library(randomForest)
library(pROC)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
options(scipen = 4)
high <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/high.csv", header = TRUE)
elementary <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/elementary.csv", header = TRUE)
middle <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/middle.csv", header = TRUE)
elementary$SchoolType <- 1
middle$SchoolType <- 2
high$SchoolType <- 3
AllStudents <- rbind(elementary, middle, high)
str(AllStudents)
str(AllStudents)
colnames(AllStudents) <- c("charter", "stud.num", "African", "Asian", "Hispanic", "White", "disadvantaged", "year.round", "core.courses", "parent.ed", "teachers.num", "teacher.prep", "teacher.emerg", "teacher.waiver", "teach.yrs", "teach.first", "teach.second", "API", "SchoolType")
str(AllStudents)
str(AllStudents)
AllStudents$parent.ed <- as.numeric(as.character(AllStudents$parent.ed))
AllStudents$stud.num <-as.numeric(AllStudents$stud.num)
AllStudents$Student.Teacher.Ratio <- AllStudents$stud.num/AllStudents$teachers.num
AllStudents <- mutate(AllStudents, charter = as.factor(mapvalues(charter, c("?", "D", "Y"), c("No", "Yes","Yes"))))
str(AllStudents)
elementary$SchoolType <- 1
middle$SchoolType <- 2
high$SchoolType <- 3
AllStudents <- rbind(elementary, middle, high)
str(AllStudents)
colnames(AllStudents) <- c("charter", "stud.num", "African", "Asian", "Hispanic", "White", "disadvantaged", "year.round", "core.courses", "parent.ed", "teachers.num", "teacher.prep", "teacher.emerg", "teacher.waiver", "teach.yrs", "teach.first", "teach.second", "API", "SchoolType")
str(AllStudents)
high <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/high.csv", header = TRUE)
elementary <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/elementary.csv", header = TRUE)
middle <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/middle.csv", header = TRUE)
elementary$SchoolType <- 1
middle$SchoolType <- 2
high$SchoolType <- 3
AllStudents <- rbind(elementary, middle, high)
str(AllStudents)
colnames(AllStudents) <- c("charter", "stud.num", "African", "Asian", "Hispanic", "White", "disadvantaged", "year.round", "core.courses", "parent.ed", "teachers.num", "teacher.prep", "teacher.emerg", "teacher.waiver", "teach.yrs", "teach.first", "teach.second", "API", "SchoolType")
str(AllStudents)
high <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/high.csv", header = TRUE)
elementary <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/elementary.csv", header = TRUE)
middle <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/middle.csv", header = TRUE)
elementary$SchoolType <- 1
middle$SchoolType <- 2
high$SchoolType <- 3
AllStudents <- rbind(elementary, middle, high)
str(AllStudents)
dplyr(AllStudents, ~ parent.ed, summarize)
library(plyr)
library(dplyr)
library(ggplot2)
library(glmnet)
library(leaps)  # needed for regsubsets
library(boot)
library(knitr)
library(partykit)
library(caret)
library(rpart)
library(randomForest)
library(pROC)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
options(scipen = 4)
dplyr(AllStudents, ~ parent.ed, summarize)
ddply(AllStudents, ~ parent.ed, summarize)
library(plyr)
library(dplyr)
library(ggplot2)
library(glmnet)
library(leaps)  # needed for regsubsets
library(boot)
library(knitr)
library(partykit)
library(caret)
library(rpart)
library(randomForest)
library(pROC)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
options(scipen = 4)
high <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/high.csv", header = TRUE)
elementary <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/elementary.csv", header = TRUE)
middle <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/middle.csv", header = TRUE)
elementary$SchoolType <- 1
middle$SchoolType <- 2
high$SchoolType <- 3
AllStudents <- rbind(elementary, middle, high)
#str(AllStudents)
high <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/high.csv", header = TRUE)
elementary <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/elementary.csv", header = TRUE)
middle <- read.csv("http://www.andrew.cmu.edu/user/achoulde/95791/projects/Project%20C/middle.csv", header = TRUE)
elementary$SchoolType <- 1
middle$SchoolType <- 2
high$SchoolType <- 3
AllStudents <- rbind(elementary, middle, high)
#str(AllStudents)
format(p,"%I:%M %p")
format(p,"%H:%M")
p <- as.POSIXct('2011-12-05 18:59:10')
format(p,"%H:%M")
p
p <- as.POSIXct('2011-12-05 18:59:10')
p
format(p,"%I:%M %p")
p
format(p,"%M:%S")
temp <- list(p = c(18, 16, 6),
q = c(6, 13, 16))
temp
sapply(temp, function(x) {x - mean(x)})
nums <- list(
p = c(2, 4, 6),
q = c(16, 17, 18),
r = c(25, 30, 35)
)
nums
nums[[p]]
nums[p]
nums
nums[[p]][2]
nums[1]
nums[c(1,3)]
nums[[2]]
nums[2]
rsconnect::setAccountInfo(name='ati-rshiny',
token='F4F98E0209B6437F66DB3B2A5A739BD1',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='ati-rshiny',
token='F4F98E0209B6437F66DB3B2A5A739BD1',
secret='<SECRET>')
rsconnect::setAccountInfo(name='ati-rshiny',
token='F4F98E0209B6437F66DB3B2A5A739BD1',
secret='<SECRET>')
library(shiny); runApp('GitHub/Homework_2/hw2.R')
runApp('GitHub/Project_1/Project_1')
runApp('GitHub/Project_1/Project_1')
options(error = recover)
runApp('GitHub/Project_1/Project_1')
runApp('GitHub/Project_1/Project_1')
runApp('GitHub/Project_1/Project_1')
runApp('C:/Users/atirv/Desktop/Fall 2018/R for Shiny Projects/Class_6-Dashboards/Dashboard Example - FINAL')
runApp('GitHub/Project_1/Project_1')
runApp('GitHub/Project_1/Project_1')
runApp('C:/Users/atirv/Desktop/Fall 2018/R for Shiny Projects/Class_6-Dashboards/Dashboard Example - FINAL')
runApp('GitHub/Project_1/Project_1')
runApp('GitHub/Project_1/Project_1')
shiny::runApp()
runApp('C:/Users/atirv/Desktop/Fall 2018/R for Shiny Projects/Class_6-Dashboards/Dashboard Example - FINAL')
runApp()
runApp()
Raw.Death.data <- read.csv("NCHS_-_Leading_Causes_of_Death__United_States.csv")
State.Death.data <- filter(Raw.Death.data, State != "United States")
runApp()
View(State.Death.data)
runApp()
filter(State.Death.data, State = "Alabama") %>% ggplot(State.Death.data, aes(x = Year, y = Deaths)) + geom_line()
filter(State.Death.data, State == "Alabama") %>% ggplot(State.Death.data, aes(x = Year, y = Deaths)) + geom_line()
filter(State.Death.data, State == "Alabama") %>% ggplot(aes(x = Year, y = Deaths)) + geom_line()
filter(State.Death.data, State == "Alabama") %>% ggplot(aes(x = Year, y = Deaths)) + geom_line()
runApp()
filter(State.Death.data, State == "Alabama") %>% ggplot(aes(x = Year, y = Deaths)) + geom_line()
practice.data <- filter(State.Death.data, State == "Alabama")
ggplot(practice.data, aes(x = Year, y = Deaths)) + geom_line()
ggplot() + geom_line(data = practice.data,
aes(x= Year, y=as.numeric(Deaths), group = 1),
colour='red')
runApp()
